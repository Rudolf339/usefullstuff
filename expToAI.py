#convert UFO export files to scenario.xml
#Author: Rudolf

#usage:
#python3 path/to/expToAI.py path/to/export.xml desc (optional) > output.xml

import xml.etree.ElementTree as ET
import sys

try:
    desc = sys.argv[3]
except:
    desc = "Autogenerated AI scenario"

def indent(elem, level=0):
    i = "\n" + level*"  "
    j = "\n" + (level-1)*"  "
    if len(elem):
        if not elem.text or not elem.text.strip():
            elem.text = i + "  "
        if not elem.tail or not elem.tail.strip():
            elem.tail = i
        for subelem in elem:
            indent(subelem, level+1)
        if not elem.tail or not elem.tail.strip():
            elem.tail = j
    else:
        if level and (not elem.tail or not elem.tail.strip()):
            elem.tail = j
    return elem

e = ET.parse(str(sys.argv[1]))
models = e.getroot().find('models')

root = ET.Element("PropertyList")
scenario = ET.SubElement(root, "scenario")
ET.SubElement(scenario, "description").text = desc

n=0
for m in models.findall("model"):
    hdg = m.find("heading-deg").text
    lat = m.find("latitude-deg").text
    lon = m.find("longitude-deg").text
    alt = m.find("elevation-ft").text
    path = m.find("elevation-ft").text

    model = ET.SubElement(scenario, "entry")

    ET.SubElement(model, "type").text = "ship"
    ET.SubElement(model, "model").text = path
    ET.SubElement(model, "name").text = "Object " + str(n)
    ET.SubElement(model, "latitude", type="doable").text = lat
    ET.SubElement(model, "longitude", type="doable").text = lon
    ET.SubElement(model, "speed", type="doable").text = 0
    ET.SubElement(model, "rudder", type="doable").text = 0
    ET.SubElement(model, "heading", type="doable").text = hdg
    ET.SubElement(model, "altitude", type="doable").text = alt

#indent(root)
#ET.dump(root)
output=ElementTree(root)
output.write("test.xml")
